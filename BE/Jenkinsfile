pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "sseon701/moyamo-spring"
        DOCKER_TAG = "latest"
        SSH_USER = "ubuntu"
        APP_PORT = "5000"
        SSH_CREDENTIAL = 'ec2'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'be/develop',
                    url: 'https://lab.ssafy.com/s12-ai-image-sub1/S12P21D203.git',
                    credentialsId: 'gitlab-credential-id'
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    sh """
                        cd BE
                        chmod +x ./gradlew
                        ./gradlew clean build -x test --no-daemon

                        echo "Building Docker Image..."
                        docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .

                        echo "Logging into Docker Hub..."
                    """
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-hub') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'EC2_IP', variable: 'EC2_IP'),
                        string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                        string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'AWS_ACCESS_KEY', variable: 'AWS_ACCESS_KEY'),
                        string(credentialsId: 'AWS_SECRET_KEY', variable: 'AWS_SECRET_KEY'),
                        string(credentialsId: 'S3_BUCKET_NAME', variable: 'S3_BUCKET_NAME')
                    ]) {
                        sshagent(credentials: [SSH_CREDENTIAL]) {
                            sh """
                                ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_IP} '
                                    docker stop moyamo-be || true
                                    docker rm moyamo-be || true
                                    docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}
                                    docker run -d --name moyamo-be --network=nginx_jenkins_network -p ${APP_PORT}:${APP_PORT} \
                                        -e DB_URL="${DB_URL}" \
                                        -e DB_USERNAME="${DB_USERNAME}" \
                                        -e DB_PASSWORD="${DB_PASSWORD}" \
                                        -e AWS_ACCESS_KEY="${AWS_ACCESS_KEY}" \
                                        -e AWS_SECRET_KEY="${AWS_SECRET_KEY}" \
                                        -e S3_BUCKET_NAME="${S3_BUCKET_NAME}" \
                                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                                '
                            """
                        }
                    }
                }
            }
        }

        stage('Notify Success') {
            steps {
                script {
                    def commitMessage = sh(script: "git log -1 --pretty=format:'%s'", returnStdout: true).trim()
                    def commitAuthor = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()

                    withCredentials([
                        string(credentialsId: 'MATTERMOST_WEBHOOK_URL_BE', variable: 'WEBHOOK_BE'),
                        string(credentialsId: 'MATTERMOST_WEBHOOK_URL_FE', variable: 'WEBHOOK_FE')
                    ]) {
                        def payload = """
                        {
                            "text": ":rocket: **BE 배포 완료!**\\n\\n:label: 브랜치: be/develop\\n:package: 도커 이미지: ${DOCKER_IMAGE}:${DOCKER_TAG}\\n:bust_in_silhouette: 작성자: ${commitAuthor}\\n:page_facing_up: 커밋 메시지: ${commitMessage}\\n:link: <${BUILD_URL}|빌드 상세 보기>"
                        }
                        """

                        sh "curl -X POST -H 'Content-Type: application/json' -d '${payload}' \"$WEBHOOK_BE\""
                        sh "curl -X POST -H 'Content-Type: application/json' -d '${payload}' \"$WEBHOOK_FE\""
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                def commitMessage = sh(script: "git log -1 --pretty=format:'%s'", returnStdout: true).trim()
                def commitAuthor = sh(script: "git log -1 --pretty=format:'%an'", returnStdout: true).trim()

                withCredentials([string(credentialsId: 'MATTERMOST_WEBHOOK_URL_BE', variable: 'WEBHOOK_BE')]) {
                    def payload = """
                    {
                        "text": ":x: **BE 배포 실패!**\\n\\n:bust_in_silhouette: 작성자: ${commitAuthor}\\n:page_facing_up: 커밋 메시지: ${commitMessage}\\n:link: <${BUILD_URL}|빌드 상세 보기>\\n@sunju701"
                    }
                    """
                    sh "curl -X POST -H 'Content-Type: application/json' -d '${payload}' \"$WEBHOOK_BE\""
                }
            }
        }
    }
}
